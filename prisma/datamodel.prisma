model Post {
  id Int    @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean @default(value: false)
  title String
  content String
  author User? @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id Int  @id @default(autoincrement())
  email String @unique
  password String
  name String
  companyName String
  country String
  posts Post[]
   mydevices MyDevice[]
  devices Device[]
  appointments Appointments[]
  emailConfirmed Boolean
  emailConfirmToken String
  role Role @default(value: CUSTOMER)
  resetToken String
  resetExpires DateTime
  lastLogin DateTime
    joinedAt DateTime
    teams Team[]
}
model Device {
  id Int @id @default(autoincrement())
  published Boolean @default(value: false)
  name_EN String
  name_UA String
  name_RUS String
  module String
  tr TR? @relation(fields: [deviceId], references: [id])
  dtc DTC? @relation(fields: [deviceDTC], references: [id])
  author User? @relation(fields: [deviceUser], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deviceId Int?
  deviceDTC Int?
  deviceUser Int?
}
model DTC{
id Int  @id @default(autoincrement())
name_UA String
name_EN String
device_id Device[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

}


model TR{
id Int  @id @default(autoincrement())
name_TR_UA String
name_TR_EN String
device_id Device[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model LetterEmail{
id Int @id @default(autoincrement())
from String
subject String
text String
}

enum Role{
ADMIN
CUSTOMER
TEAM
}
model MyDevice{
id Int @id @default(autoincrement())
name_device String
brand_device String
series_device String
kind_device String
certificate_calibration Boolean
certificate_verification Boolean
certificate_conformity Boolean
module_device String
tr_device String
certificate_assessment_number String
certificate_verification_number String
certificate_calibration_number String
department_assessment_center String
department_verification_center String
department_calibration_center String
conformity_data DateTime
calibration_data DateTime
valid_verification DateTime
notes String
author User? @relation(fields: [id], references: [id])
createdAt DateTime @default(now())
}
model Team{
    id Int @id @default(autoincrement())
    name String @unique
    author User? @relation(fields: [id], references: [id])
    teamMembers TeamMembers[]
    payment Boolean
    role Role @default(value: TEAM)
}

model TeamMembers{
id Int @id @default(autoincrement())
emailMembers String @unique
member Members @default(value: MEMBER1)
memberConfirmed Boolean
memberConfirmToken String
team Team? @relation(fields: [id], references: [id])
}
enum Members{
MEMBER1
MEMBER2
MEMBER3
MEMBER4
MEMBER5
}
model Appointments {
id Int @id @default(autoincrement())
title String
start_date DateTime
end_date DateTime
location String
notes String
author User? @relation(fields: [id], references: [id])
}
datasource db {
  provider = "postgresql"
  url      = env("https://eu1.prisma.sh/public-lightfright-56/backend/dev")
}
generator client {
  provider = "prisma-client-js"
}
